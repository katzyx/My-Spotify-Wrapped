Tools Required:
    - docker
    - pandas 
    - oauth (automated get user playlist)
    - javascript
    - node.js

Design Flow
1. create app to access app credentials
    - required for access token
    - required for API authorization
2. Tutorials:
    - https://developer.spotify.com/documentation/web-api/tutorials/getting-started
    - https://developer.spotify.com/documentation/web-api/howtos/web-app-profile


Access Tokens
    - to use access token, must have Authorization header parameter
    - access token valid for 1 hour, must get new one after

API Calls
    - restful API with different endpoints that return JSON metadata from Spotify Data Catalogue
    - base address: https://api.spotify.com
    - all API requests require authorization
    - access data via HTTP requests in UTF-8 format to API endpoint
    - API returns JSON in response body (or HTTP status code)

Apps
    - app provides Client ID and Client Secret needed for authorization

Authorization
    - implements OAuth 2.0 authorization framework
        - https://datatracker.ietf.org/doc/html/rfc6749
    - access to protected resouces is determined by scopes
        - scopes enable app to access functionality
    - scopes set during authorization determines access permissions
    - authorization process requires client credentials (ID and secret)
    - server issues access token, used to make API calls
Playlists
    - find a playlist using its Spotify ID
    - can retrun information on any local files
    - every change to playlist is saved in version history
    - playlist has associated set of images which can be retrieved

Quota Modes
    - mode in which an app can be made: development mode or extended quota mode

Rate Limit
    - number of calls that app makes to Spotify in a rolling 30s window
    - if app exceeds rate limit, will see 429 error responses

Scopes
    - only info users choose to share will be shared

-----------------------------------------------------------------------------------------------

Authorization Code Flow
    - suitable for long-running applications where user grants permission once

pre-req: create app
source code: https://github.com/spotify/web-api-examples/tree/master/authentication/authorization_code

1. Request Use Authorization
    - app must buid and send GET request to /authorize endpoint w/ parameters

2. Respose
    - if request accepted, user is redirected back to app using redirect_uri

3. Request Access Token
    - if request accepted, app can exchange authorization code for access token
    - make POST request to /api/token endpoin

4. Response
    - on success, return 200 OK status and JSON data

5. Request Refressed Access Token
    - tokens expire
    - new tokens granted by supplying refresh token
    

    